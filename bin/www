#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('temp:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8888');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


//-----------------new code for server --------------------
const MongoClient = require('mongodb').MongoClient;
const bcrypt = require('bcrypt');

var jwToken = require('../public/javascripts/server/jwToken.js');
var defineVal = require('../public/javascripts/server/defineValue.js');
const { info } = require('console');



const io = require('socket.io')(server, {
  cors: {
    origin: '*',
  }
});


io.on('connection', (client) => {
  console.log('a user connected');

   //get login by jsonwebtoken
   client.on('userLoginJwt', function(token){
    var decodedToken = jwToken.decodeToken(token);
    let isDecodeTokenOk = true;

    decodedToken.catch((err) => {
      client.emit('userLoginResult', defineVal.jwtExpired);
      isDecodeTokenOk = false;
    }).then((decoded) => {
      if(isDecodeTokenOk)
        client.emit('userLoginResult', defineVal.validResult); 
        console.log(decoded.username + " is login via token"); 
      });
  });

  client.on('userLogin', (loginInfo)=>{
    const usname = loginInfo.username;
    let isDecodeTokenOk = true;

    let userRefreshToken = jwToken.getRefreshToken(usname);
    userRefreshToken.catch((err) => {
      console.log("error load refresh token");
      console.log(err);
    }).then((refreshToken) =>{
      
      if(refreshToken){       
        let objRefreshToken = jwToken.decodeRefreshToken(refreshToken);
        objRefreshToken.catch((err) => {
          console.log("Decode refresh token is failt");
          loginViaDatabase(loginInfo);
          isDecodeTokenOk = false;
        }).then((jsonToken) =>{          
          if(isDecodeTokenOk){
              //valid username
            if(loginInfo.username === jsonToken.username){
              //valid password
              if(loginInfo.password === jsonToken.password){
                console.log(loginInfo.username + " is login via refresh token");
                client.emit('userLoginResult', defineVal.validResult);

                createToken(loginInfo.username);
              }else{//invalid password
                client.emit('userLoginResult', defineVal.loginInvalidPassword);
              }
            }else{//invalid username
              client.emit('userLoginResult', defineVal.loginInvalidUsername);
            }
          }
          
        });      
      }else{
        loginViaDatabase(loginInfo);
      }


    })

  });

function loginViaDatabase(loginInfo){
  const username = loginInfo.username;
  const psw = loginInfo.password;

  MongoClient.connect(defineVal.baseUrl, function(err, db){
      if (err) {
          throw err;
      } else {                    
        var dbo = db.db(defineVal.dbAllUser);
        dbo.collection(defineVal.userColection).findOne({username: username}, function(err, user){                  
          if (err) {
              throw err;
          } else {
              if (user == null) {                      
                //result verification to client: invalid username
                client.emit('userLoginResult', defineVal.loginInvalidUsername);
              } else {
                var hash = user.password;
                bcrypt.compare(psw, hash, function(err, result) {
                  if (result) {                    
                    createToken(username);

                    const refreshToken = jwToken.encodeRefreshToken(username, psw);
                    jwToken.saveRefreshToken(username, refreshToken);

                    //result verification to client
                    client.emit('userLoginResult', defineVal.validResult);   
                    
                    
                    //set global values
                    client.username = username;
                    client.refreshToken = refreshToken;
                    
                  } else {
                    //result verification to client: invalid password
                    client.emit('userLoginResult', defineVal.loginInvalidPassword);
                  }
                });
              }
              db.close();
          }
      });  
      } 
  });
}

function createToken(usname){                      
  const token = jwToken.encodeToken(usname);
  client.emit('jwtResult', token);
}




  client.on('disconnect', () => {
    console.log('user disconnected');
  });
});